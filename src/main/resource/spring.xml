<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="byName"
    xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/context 
                        http://www.springframework.org/schema/context/spring-context-3.0.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能
    <context:component-scan base-package="com.ykyd.eb" /> -->
	<context:component-scan base-package="com.ykyd.eb">
	    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
    <!-- 数据源，BasicDataSource,commons-dbcp -->
    <context:property-placeholder location="classpath:db.properties" />
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!-- 配置 Hibernate SesssionFactory -->
    <!-- 
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>   
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>     
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
            </props>
        </property>
        <property name="packagesToScan" value="com.ykyd.eb.entity" />
    </bean>
    -->
    <!--配置事务-->
    <!--
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
      -->
    <!-- 配置 JPA 实体管理器工厂 -->
	<!-- 用于创建会话/实体管理器的工厂类 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- 用于指定Spring定义的数据源。 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 用于指定JPA配置文件，对于多JPA配置文件情况请选择设置persistenceUnitManager属性来解决。 -->
		<property name="persistenceXmlLocation" value="classpath*:/persistence.xml" />
		<!-- 用于指定持久化单元名称。 -->
		<property name="persistenceUnitName" value="persistenceUnit" />
		<!-- 用于设置JPA实现厂商的特定属性，如设置hibernate的是否自动生成DDL的属性generateDdl，这些属性是厂商特定的，因此最好在这里设置。 -->
		<!-- 目前Spring提供HibernateJpaVendorAdapter，OpenJpaVendorAdapter，EclipseJpaVendorAdapter，TopLinkJpaVenderAdapter四个实现。 -->
		<!-- 其中最主要的属性是“database”，用来指定使用的数据库类型。 -->
		<!-- 从而根据数据库类型决定如何将数据库特定异常转换为Spring一致性异常。 -->
		<!-- 目前支持以下数据库：DB2，DERBY，H2，HSQL，INFORMIX，MYSQL，ORACLE，POSTGRESQL，SQL_SERVER，SYBASE -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<!-- 是否显示SQL -->
				<property name="showSql" value="true" />
				<!-- 是否自动生成DDL（数据库定义语言） -->
				<property name="generateDdl" value="true" />
				<!-- 数据库类型
				<property name="database" value="MYSQL"/>
				-->
			</bean>
		</property>

		<!-- 指定JPA属性。 -->
		<!-- 如Hibernate中指定是否显示SQL的“hibernate.show_sql”属性，对于jpaProperties设置的属性自动会放进jpaPropertyMap中。 -->
		<property name="jpaProperties">
			<props>
				<!-- SQL方言 -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 设置注释命名策略 -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>

				<!-- Hibernate 二级缓存 -->
				<!-- 是否启用二级缓存
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop> -->
				<!-- 二级缓存区域 
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>-->
				<!-- 是否允许查询缓存 
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>-->

				<!-- 指定JDBC抓取数量的大小，非零值（调用Statement.setFetchSize()） 
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>-->
				<!-- 允许Hibernate使用JDBC2的批量更新，非零值，取值 建议取5到30之间的值
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop> -->

				<!-- 设置JDBC事务隔离级别。 -->
				<!-- 查看java.sql.Connection来了解各个值的具体意义，但请注意多数数据库都不支持所有的隔离级别。 -->
				<!-- 取值 1, 2, 4, 8 -->
				<prop key="hibernate.connection.isolation">2</prop>
				<!-- Error applying BeanValidation relational constraints。 -->
				<!-- 解决办法：由于javax.persistence.validation.mode的属性值默认是auto，所以会出错。在hibernate.cfg.xml里将javax.persistence.validation.mode设置为none，就可以避免出错了。 -->
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
	</bean>
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<!-- JPA 实体管理器工厂（转交事务管理给Spring） -->
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
    <tx:annotation-driven transaction-manager="transactionManager" />
     
</beans>